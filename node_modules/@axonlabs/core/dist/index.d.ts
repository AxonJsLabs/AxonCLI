import * as http from 'http';
import { ServerOptions } from 'https';

interface AxonPlugin {
    name: string;
    version: string;
    init(core: AxonCore): Promise<void>;
    [methodName: string]: any;
}

declare class AxonRouteHandler {
    private controller;
    private middlewares;
    constructor(controller: Controller);
    middleware(fn: Middleware): this;
    getController(): Controller;
    getMiddlewares(): Middleware[];
}
declare class AxonRouter {
    private routes;
    constructor();
    /**
     * Endpoint with method GET
     *
     * The purpose of the GET method is to simply retrieve data from the server. The GET method is used to request any of the following resources:
     * - A webpage or HTML file.
     * - An image or video.
     * - A JSON document.
     * - A CSS file or JavaScript file.
     * - An XML file.
     * @param path route path
     * @param controller route request controller
     */
    get(path: string, controller: Controller): AxonRouteHandler;
    /**
     * Endpoint with method POST
     *
     * The POST HTTP request method sends data to the server for processing.
     *
     * The data sent to the server is typically in the following form:
     * - Input fields from online forms.
     * - XML or JSON data.
     * - Text data from query parameters.
     * @param path route path
     * @param controller route request controller
     */
    post(path: string, controller: Controller): AxonRouteHandler;
    /**
     * Endpoint with method PUT
     *
     * The PUT HTTP request method sends data to the server for replacing and changing full state.
     * @param path route path
     * @param controller route request controller
     */
    put(path: string, controller: Controller): AxonRouteHandler;
    /**
     * Endpoint with method PATCH
     *
     * The PATCH HTTP request method sends data to the server for editing part of a data.
     * @param path route path
     * @param controller route request controller
     */
    patch(path: string, controller: Controller): AxonRouteHandler;
    /**
     * Endpoint with method DELETE
     *
     * The DELETE HTTP request method sends data to the server for deleting a data.
     * @param path route path
     * @param controller route request controller
     */
    delete(path: string, controller: Controller): AxonRouteHandler;
    /**
     * Endpoint with method OPTIONS
     *
     * The HTTP OPTIONS method returns a listing of which HTTP methods are supported and allowed.
     * @param path route path
     * @param controller route request controller
     */
    options(path: string, controller: Controller): AxonRouteHandler;
    exportRoutes(): HttpMethods;
}

interface Routes {
    [key: string]: AxonRouteHandler;
}
interface HttpMethods {
    GET: Routes;
    POST: Routes;
    PUT: Routes;
    DELETE: Routes;
    OPTIONS: Routes;
    PATCH: Routes;
}
type Controller = (req: Request, res: Response) => Promise<void>;
type Middleware = (req: Request, res: Response, next: nextFn) => Promise<void>;
type nextFn = () => Promise<void>;

type AxonHttpsConfig = ServerOptions;
/**
 * Cors configuration for AxonCore.
 */
interface AxonCorsConfig {
    /**
     * Configures the Access-Control-Allow-Origin CORS header.
     *
     * Possible values:
     *
     * * Boolean - set origin to true to reflect the request origin, as defined by `req.header('Origin')`, or set it to false to disable CORS.
     *
     * * String - set origin to a specific origin. For example if you set it to `"http://example.com"` only requests from "http://example.com" will be allowed.
     *
     * * RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it's a match, the request origin will be reflected. For example the pattern `/example\.com$/` will reflect any request that is coming from an origin ending with "example.com".
     *
     * * Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example `["http://example1.com", /\.example2\.com$/]` will accept any request from "http://example1.com" or from a subdomain of "example2.com".
     *
     * * Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second.
     */
    origin?: boolean | string | Array<string | RegExp> | Function;
    /**
     * Configures the Access-Control-Allow-Methods CORS header.
     *
     * Possible values:
     *
     * * String - exprects a comma-delimited `'GET,POST,DELETE'`
     *
     * * Array - `['GET', 'POST', 'DELETE']`
     */
    methods?: string | string[];
    /**
     * Configures the Access-Control-Allow-Headers CORS header.
     *
     * Possible values:
     *
     * * String - exprects a comma-delimited `'Content-Type,Authorization'`
     *
     * * Array - `['Content-Type', 'Authorization']`
     *
     * If not specified, defaults to reflecting the headers specified in the request's Access-Control-Request-Headers header.
     */
    allowedHeaders?: string | string[];
    /**
     * Configures the Access-Control-Expose-Headers CORS header.
     *
     * Possible values:
     *
     * * String - exprects a comma-delimited `'Content-Range,X-Content-Range'`
     *
     * * Array - `['Content-Range', 'X-Content-Range']`
     *
     * If not specified, no custom headers are exposed.
     */
    exposedHeaders?: string | string[];
    /**
     * Configures the Access-Control-Allow-Credentials CORS header.
     *
     * Set to `true` to pass the header, otherwise it is omitted.
     */
    credentials?: boolean;
    /**
     * Configures the Access-Control-Max-Age CORS header.
     *
     * Set to an `integer` to pass the header, otherwise it is omitted.
     */
    maxAge?: number;
    /**
     * Pass the CORS preflight response to the next handler.
     */
    preflightContinue?: boolean;
    /**
     * Provides a status code to use for successful `OPTIONS` requests, since some legacy browsers (IE11, various SmartTVs) choke on `204`.
     */
    optionsSuccessStatus?: number;
}
/**
 * Configuration for AxonCore custom response messages.
 */
interface AxonResponseMessage {
    /**
     * response error message for 404 not found response from core
     *
     * use `{path}` to show request method.
     */
    notFound?: string;
    /**
     * response error message for 500 internal server error response from core
     */
    serverError?: string;
    /**
     * response error message for 405 method not allowed response from core
     *
     * use `{method}` to show request method.
     *
     * example:
     * - config: 'Method {method} is not allowed'
     * - response: 'Method TRACE is not allowed'
     */
    methodNotAllowed?: string;
    [key: string]: string | undefined;
}
interface UnloadRouteParams {
    router?: AxonRouter;
    method?: keyof HttpMethods;
    route?: string;
}

declare class AxonCore {
    #private;
    private routes;
    private globalMiddlewares;
    private config;
    private configsLoaded;
    private passRoutes;
    private routesLoaded;
    private pluginLoader;
    constructor();
    /**
     * Loads a specified Axon plugin using the plugin loader.
     *
     * @param {AxonPlugin} plugin - The plugin to be loaded. It should be an instance of AxonPlugin.
     * @example
     * // this class must implements AxonPlugin type
     * class MyPlugin implements AxonPlugin {
     *      name = "plugin"
     *      version = "1.0.0"
     *
     *      init(core) {}
     * }
     *
     * core.loadPlugin(new MyPlugin())
     */
    loadPlugin(plugin: AxonPlugin): Promise<void>;
    /**
     * loads created routes
     * @param router instance of Router which routes set with it.
     * @param prefix
     * @example
     * const router = Router()
     *
     * router.get('/', async (req, res) => {});
     *
     * core.loadRoute(router) // without prefix
     * core.loadRoute(router, '/api/v1') // with prefix
     */
    loadRoute(router: AxonRouter, prefix?: string): Promise<void>;
    /**
     * unload routes based on entered parameters
     * @param route
     * @param method
     * @param router
     * @example
     * // this one unloads a route with path `/api/v1/user`.
     * core.unloadRoute({
     *     route: '/api/v1/user'
     * });
     *
     * // this one unloads all  routes with method `GET`
     * core.unloadRoute({
     *     method: 'GET'
     * });
     *
     * const userRouter = Router();
     *
     * // this one unloads all routes of userRouter.
     * core.unloadRoute({
     *     router: userRouter
     * });
     *
     * // this one unloads a route with path `/api/v1/user`, all routes with method `GET` and all routes of userRouter.
     * core.unloadRoute({
     *     route: '/api/v1/user',
     *     method: "GET",
     *     router: userRouter
     * })
     */
    unloadRoute({ route, method, router }: UnloadRouteParams): Promise<void>;
    /**
     * unload all routes
     * @example
     * core.unloadRoutes();
     */
    unloadRoutes(): Promise<void>;
    /**
     * You can set one or many middlewares in global scope with this method.
     * @example
     * core.globalMiddleware(authMiddleware)
     * core.globalMiddleware([uploadMiddleware, userMiddleware])
     * @param fn
     */
    globalMiddleware(fn: Middleware | Middleware[]): Promise<void>;
    /**
     *
     * @param req
     * @param res
     * @param next
     * @param middlewares
     */
    private handleMiddleware;
    private response;
    /**
     * Start listening to http incoming requests
     * @param {string} host server host address
     * @param {number} port server port
     * @param {Function} [callback] callback a function to run after starting to listen
     * @example
     * core.listen("0.0.0.0", 80)
     * // or
     * core.listen("0.0.0.0", {
     *      https: 443,
     *      http: 80
     * })
     */
    listen(host?: string, port?: number | {
        https: number;
        http: number;
    }, callback?: (mode?: string) => void): Promise<void>;
}

declare class AxonResponse {
    private res;
    constructor(res: Response);
    /**
     * to add custom response message
     */
    message(message: string): this;
    /**
     * to add body for send to client as a response body.
     *
     * **calling this method will send response to user, so ensure you called all methods which you want before this**
     * @param body the body of response to client
     */
    body(body: string | object): void;
    setHeader(key: string, value: string): this;
}

interface AxonConfig {
    /**
     * AxonCore debug mode.
     */
    DEBUG?: boolean;
    /**
     * AxonCore logger.
     */
    LOGGER?: boolean;
    /**
     * Verboose mode of logger.
     */
    LOGGER_VERBOSE?: boolean;
    /**
     * Configuration for AxonCore custom response messages.
     */
    RESPONSE_MESSAGES?: AxonResponseMessage;
    /**
     * Cors configuration for AxonCore.
     */
    CORS?: AxonCorsConfig;
    /**
     * Https configuration for AxonCore.
     */
    HTTPS?: AxonHttpsConfig;
}

/**
 * Instance of AxonRouter for easier usage
 * @returns {AxonRouter} returns an instance of AxonRouter
 */
declare const Router: () => AxonRouter;
/**
 * Instance of AxonCore for easier usage
 * @returns {AxonCore} returns an instance of AxonCore
 */
declare const Axon: () => AxonCore;
declare module 'http' {
    interface IncomingMessage {
        /**
         * the body of request which sent from client
         */
        body?: string | Record<string, string | undefined> | undefined;
        /**
         * incoming request parameters in request path
         *
         * example:
         * - route: `/api/v1/user/:id`
         * - path: `/api/v1/user/12`
         * - params: { "id": 12 }
         */
        params: Record<string, string | undefined>;
    }
    interface ServerResponse {
        /**
         * to add http response code for client.
         * @param code http response code
         */
        status: (code: number) => AxonResponse;
    }
}
interface Request extends http.IncomingMessage {
}
interface Response extends http.ServerResponse {
}
interface Headers extends http.OutgoingHttpHeaders {
}

export { Axon, type AxonConfig, AxonCore, type AxonCorsConfig, type AxonHttpsConfig, type AxonPlugin, type AxonResponseMessage, AxonRouter, type Controller, type Headers, type Middleware, type Request, type Response, Router, type UnloadRouteParams, type nextFn };
