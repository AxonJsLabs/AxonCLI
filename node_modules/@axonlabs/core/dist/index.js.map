{"version":3,"sources":["../src/index.ts","../src/core/AxonCore.ts","../src/core/utils/coreLogger.ts","../src/core/utils/routePrefixHandler.ts","../src/core/utils/getRequestBody.ts","../src/Router/exceptions/RouterException.ts","../src/core/exceptions/CoreExceptions.ts","../src/core/plugin/PluginLoader.ts","../src/core/response/AxonResponse.ts","../src/core/cors/AxonCors.ts","../src/core/config/AxonConfig.ts","../src/core/config/defaultConfig.ts","../src/core/services/unloadRoutesService.ts","../src/Router/AxonRouter.ts"],"sourcesContent":["// Libraries\r\nimport * as http from \"http\";\r\n\r\n// Instances\r\nimport AxonCore from \"./core/AxonCore\";\r\nimport AxonRouter from \"./Router/AxonRouter\";\r\n\r\n// Types\r\nimport AxonResponse from \"./core/response/AxonResponse\";\r\nimport type { Controller, Middleware , nextFn} from \"./types/GlobalTypes\";\r\nimport type { AxonResponseMessage, AxonCorsConfig, AxonHttpsConfig, UnloadRouteParams } from \"./types/CoreTypes\";\r\nimport type { AxonConfig } from \"./types/ConfigTypes\";\r\nimport type { AxonPlugin } from \"./types/PluginTypes\";\r\n\r\n/**\r\n * Instance of AxonRouter for easier usage\r\n * @returns {AxonRouter} returns an instance of AxonRouter\r\n */\r\nconst Router = (): AxonRouter => new AxonRouter();\r\n\r\n/**\r\n * Instance of AxonCore for easier usage\r\n * @returns {AxonCore} returns an instance of AxonCore\r\n */\r\nconst Axon = (): AxonCore => new AxonCore();\r\n\r\ndeclare module 'http' {\r\n  interface IncomingMessage {\r\n    /**\r\n     * the body of request which sent from client\r\n     */\r\n    body?: string | Record<string, string | undefined> | undefined;\r\n    /**\r\n     * incoming request parameters in request path\r\n     * \r\n     * example: \r\n     * - route: `/api/v1/user/:id`\r\n     * - path: `/api/v1/user/12`\r\n     * - params: { \"id\": 12 }\r\n     */\r\n    params: Record<string, string | undefined>;\r\n  }\r\n\r\n  interface ServerResponse {\r\n    /**\r\n     * to add http response code for client.\r\n     * @param code http response code\r\n     */\r\n    status: (code: number) => AxonResponse;\r\n  }\r\n}\r\n\r\ninterface Request extends http.IncomingMessage {}\r\ninterface Response extends http.ServerResponse {}\r\ninterface Headers extends http.OutgoingHttpHeaders {}\r\n\r\nexport {\r\n  AxonCore,\r\n  AxonRouter,\r\n  Axon,\r\n  Router,\r\n  AxonConfig,\r\n  AxonResponseMessage,\r\n  AxonCorsConfig,\r\n  AxonHttpsConfig,\r\n  UnloadRouteParams,\r\n  Request,\r\n  Response,\r\n  Headers,\r\n  nextFn,\r\n  AxonPlugin,\r\n  Controller,\r\n  Middleware\r\n}","import * as http from \"http\";\nimport * as https from \"https\";\nimport { colors } from \"@spacingbat3/kolor\"\nimport { Key, Keys, pathToRegexp } from \"path-to-regexp\";\n\n// Utils\nimport { logger } from \"./utils/coreLogger\";\nimport addRoutePrefix from \"./utils/routePrefixHandler\";\nimport getRequestBody from \"./utils/getRequestBody\";\n\n// Types\nimport type { Request, Response } from \"..\";\nimport type { AxonPlugin } from \"../types/PluginTypes\";\nimport type { Controller, HttpMethods, JsonResponse, Middleware } from \"../types/GlobalTypes\";\nimport type { AxonConfig } from \"../types/ConfigTypes\";\nimport type { UnloadRouteParams } from \"../types/CoreTypes\";\n\n// Exceptions\nimport { routeDuplicateException } from \"./exceptions/CoreExceptions\";\n\n// Instances\nimport Router from \"../Router/AxonRouter\";\n\n// Features\nimport { PluginLoader } from \"./plugin/PluginLoader\";\nimport AxonResponse from \"./response/AxonResponse\";\nimport AxonCors from \"./cors/AxonCors\";\nimport { resolveConfig } from \"./config/AxonConfig\";\nimport { unloadRouteService, unloadRoutesService } from \"./services/unloadRoutesService\";\n\n// Default values\nconst defaultResponses = {\n    notFound: \"Not found\",\n    serverError: \"Internal server error\",\n    methodNotAllowed: \"Method {method} not allowed\"\n}\n\nexport default class AxonCore {\n    private routes: HttpMethods;\n    private globalMiddlewares: Middleware[];\n    private config: AxonConfig;\n    private configsLoaded: boolean;\n    private passRoutes: boolean;\n    private routesLoaded: boolean;\n\n    private pluginLoader: PluginLoader = new PluginLoader();\n\n    constructor() {\n        this.routes = {\n            GET: {},\n            POST: {},\n            PUT: {},\n            PATCH: {},\n            DELETE: {},\n            OPTIONS: {}\n        }\n\n        this.globalMiddlewares = [];\n\n        this.config = {};\n        this.configsLoaded = false;\n        this.passRoutes = true;\n        this.routesLoaded = false;\n    }\n\n    /**\n     * Loads a specified Axon plugin using the plugin loader.\n     *\n     * @param {AxonPlugin} plugin - The plugin to be loaded. It should be an instance of AxonPlugin.\n     * @example\n     * // this class must implements AxonPlugin type\n     * class MyPlugin implements AxonPlugin {\n     *      name = \"plugin\"\n     *      version = \"1.0.0\"\n     *\n     *      init(core) {}\n     * }\n     *\n     * core.loadPlugin(new MyPlugin())\n     */\n    async loadPlugin(plugin: AxonPlugin) {\n        await this.pluginLoader.loadPlugin(plugin);\n    }\n\n    async #initializePlugins() {\n        await this.pluginLoader.initializePlugins(this);\n    }\n\n    /**\n     * A method to load core configs\n     *\n     */\n    async #loadConfig() {\n        this.config = await resolveConfig();\n\n        this.configsLoaded = true;\n    }\n\n    /**\n     * loads created routes\n     * @param router instance of Router which routes set with it.\n     * @param prefix\n     * @example\n     * const router = Router()\n     *\n     * router.get('/', async (req, res) => {});\n     *\n     * core.loadRoute(router) // without prefix\n     * core.loadRoute(router, '/api/v1') // with prefix\n     */\n    async loadRoute(router: Router, prefix?: string) {\n        this.passRoutes = false;\n\n        const routerRoutes: HttpMethods = router.exportRoutes();\n\n        (Object.keys(routerRoutes) as Array<keyof HttpMethods>).forEach((method) => {\n            if (Object.keys(routerRoutes[method]).length > 0) {\n                Object.keys(routerRoutes[method]).forEach((route) => {\n                    if (!this.routes[method][route]) {\n                        const originalRoute = route\n\n                        if (prefix) {\n                            route = addRoutePrefix(route, prefix)\n                        }\n\n                        if (route[0] !== \"/\")\n                            route = `/${route}`\n\n                        if (route[route.length - 1] === \"/\")\n                            route = route.slice(0, -1)\n\n                        this.routes[method][route] = routerRoutes[method][originalRoute]\n                        this.routes['OPTIONS'][route] = routerRoutes[method][originalRoute];\n\n                        logger.debug(`loaded route ${method} ${route}`)\n                    } else {\n                        routeDuplicateException(method, route)\n                    }\n                })\n            }\n        })\n\n        this.routesLoaded = true;\n    }\n\n    /**\n     * unload routes based on entered parameters\n     * @param route\n     * @param method\n     * @param router\n     * @example\n     * // this one unloads a route with path `/api/v1/user`.\n     * core.unloadRoute({\n     *     route: '/api/v1/user'\n     * });\n     *\n     * // this one unloads all  routes with method `GET`\n     * core.unloadRoute({\n     *     method: 'GET'\n     * });\n     *\n     * const userRouter = Router();\n     *\n     * // this one unloads all routes of userRouter.\n     * core.unloadRoute({\n     *     router: userRouter\n     * });\n     *\n     * // this one unloads a route with path `/api/v1/user`, all routes with method `GET` and all routes of userRouter.\n     * core.unloadRoute({\n     *     route: '/api/v1/user',\n     *     method: \"GET\",\n     *     router: userRouter\n     * })\n     */\n    async unloadRoute({ route, method, router }: UnloadRouteParams) {\n        await unloadRouteService({ _routes: this.routes, route, router, method });\n    }\n\n    /**\n     * unload all routes\n     * @example\n     * core.unloadRoutes();\n     */\n    async unloadRoutes() {\n        await unloadRoutesService(this.routes)\n    }\n\n    /**\n     * You can set one or many middlewares in global scope with this method.\n     * @example\n     * core.globalMiddleware(authMiddleware)\n     * core.globalMiddleware([uploadMiddleware, userMiddleware])\n     * @param fn\n     */\n    async globalMiddleware(fn: Middleware | Middleware[]) {\n        if (typeof fn === \"function\") {\n            this.globalMiddlewares.push(fn)\n        }\n\n        if (typeof fn === \"object\") {\n            for (const middleware of fn) {\n                if (typeof middleware === \"function\") {\n                    this.globalMiddlewares.push(middleware);\n                }\n            }\n        }\n\n        logger.debug(\"global middlewares loaded\")\n    }\n\n    /**\n     * Http request main handler\n     * @param req incoming request\n     * @param res server response\n     * @returns\n     */\n    async #handleRequest(req: Request, res: Response) {\n        res.status = (code: number) => {\n            res.statusCode = code\n\n            return new AxonResponse(res);\n        }\n\n        if (!Object.keys(this.routes).includes(req.method as keyof HttpMethods)) {\n            return this.response(req, res, {\n                body: {\n                    message: this.config.RESPONSE_MESSAGES?.methodNotAllowed?.replace(\"{method}\", (req.method as string)) || defaultResponses.methodNotAllowed?.replace(\"{method}\", (req.method as string))\n                },\n                responseCode: 405\n            })\n        }\n\n        const method = req.method as keyof HttpMethods\n\n        let foundRoute = false;\n\n        if (Object.keys(this.routes[method]).length === 0) {\n            return this.response(req, res, {\n                body: {\n                    message: this.config.RESPONSE_MESSAGES?.notFound?.replace(\"{path}\", (req.url as string)) ||\n                    defaultResponses.notFound?.replace(\"{path}\", (req.url as string))\n                },\n                responseCode: 404\n            })\n        }\n\n        for (const path of Object.keys(this.routes[method])) {\n            const index = Object.keys(this.routes[method]).indexOf(path);\n            let keys: Keys;\n            const regexp = pathToRegexp(path);\n            keys = regexp.keys\n\n            // Using the WHATWG URL API to get the pathname because url.parse is deprecated and this way is more secure.\n            const urlRegex = /^\\/{2,}$/;\n\n            if (urlRegex.test(req.url as string)) {\n                this.response(req, res, {\n                    body: {\n                        message: this.config.RESPONSE_MESSAGES?.notFound?.replace(\"{path}\", (req.url as string)) ||\n                        defaultResponses.notFound?.replace(\"{path}\", (req.url as string))\n                    },\n                    responseCode: 404\n                })\n                break;\n            }\n\n            const url = new URL(req.url as string, `http://${req.headers.host}`);\n            const pathname = url.pathname;\n\n            const match: RegExpExecArray | null = regexp.regexp.exec(pathname);\n\n            if (match) {\n                try {\n                    if (!foundRoute) {\n                        foundRoute = true\n\n                        const params: Record<string, string | undefined> = {};\n\n                        keys.forEach((key: Key, index: number) => {\n                            params[key.name] = match[index + 1];\n                        });\n\n                        req.params = params;\n\n                        const route = this.routes[method][path]\n\n                        const middlewares: Middleware[] = route.getMiddlewares();\n\n                        const controller: Controller = route.getController();\n\n                        const axonCors = await AxonCors.middlewareWrapper(this.config.CORS);\n\n                        await this.handleMiddleware(req, res, async () => {\n                            await this.handleMiddleware(req, res, async () => {\n                                await this.handleMiddleware(req, res, async () => {\n                                    await controller(req, res);\n                                }, middlewares);\n                            }, this.globalMiddlewares);\n                        }, [axonCors]);\n\n                        // log incoming requests\n                        if (this.config.LOGGER_VERBOSE) {\n                            logger.request({\n                                ip: req.socket.remoteAddress,\n                                url: req.url,\n                                method: req.method,\n                                headers: req.headers,\n                                body: req.body,\n                                code: res.statusCode\n                            }, \"new http request\")\n                        } else {\n                            logger.request(`${req.socket.remoteAddress} - ${req.method} ${req.url} ${res.statusCode} - ${req.headers[\"user-agent\"]}`)\n                        }\n\n                    } else {\n                        continue;\n                    }\n                } catch (error) {\n                    logger.error(error)\n\n                    this.response(req, res, {\n                        body: {\n                            message: this.config.RESPONSE_MESSAGES?.serverError ||\n                            defaultResponses.serverError\n                        },\n                        responseCode: 500\n                    });\n                }\n            }\n\n            if (!foundRoute && (Object.keys(this.routes[method]).length == (index + 1))) {\n                this.response(req, res, {\n                    body: {\n                        message: this.config.RESPONSE_MESSAGES?.notFound?.replace(\"{path}\", (req.url as string)) ||\n                        defaultResponses.notFound?.replace(\"{path}\", (req.url as string))\n                    },\n                    responseCode: 404\n                });\n            }\n\n        }\n    }\n\n    /**\n     *\n     * @param req\n     * @param res\n     * @param next\n     * @param middlewares\n     */\n    private async handleMiddleware(\n        req: Request,\n        res: Response,\n        next: () => Promise<void>,\n        middlewares: Middleware[]\n    ) {\n        let index = 0;\n\n        const executeMiddleware = async () => {\n            if (index < middlewares.length) {\n                const middleware = middlewares[index++];\n\n                await middleware(req, res, executeMiddleware);\n            } else {\n                await next();\n            }\n        };\n\n        await executeMiddleware();\n    }\n\n    private response(req: Request, res: Response, data: JsonResponse) {\n        if (data.responseMessage) {\n            res.statusMessage = data.responseMessage\n        }\n\n        if (typeof data.body !== \"object\") {\n            throw new TypeError(`Response body can't be ${typeof data.body}`)\n        }\n\n        res.statusCode = data.responseCode\n\n        if (data.headers) {\n            for (const key in data.headers) {\n                if (data.headers[key]) {\n                    res.setHeader(key, data.headers[key])\n                }\n            }\n        }\n\n        // log incoming requests\n        if (this.config.LOGGER_VERBOSE) {\n            logger.request({\n                ip: req.socket.remoteAddress,\n                url: req.url,\n                method: req.method,\n                headers: req.headers,\n                body: req.body,\n                code: res.statusCode\n            }, \"New http request\")\n        } else {\n            logger.request(`${req.socket.remoteAddress} - ${req.method} ${req.url} ${res.statusCode} - ${req.headers[\"user-agent\"]}`)\n        }\n\n        return res.status(data.responseCode).body(data.body)\n    }\n\n    /**\n     * Start listening to http incoming requests\n     * @param {string} host server host address\n     * @param {number} port server port\n     * @param {Function} [callback] callback a function to run after starting to listen\n     * @example\n     * core.listen(\"0.0.0.0\", 80)\n     * // or\n     * core.listen(\"0.0.0.0\", {\n     *      https: 443,\n     *      http: 80\n     * })\n     */\n    async listen(host: string = \"127.0.0.1\", port: number | { https: number, http: number } = 8000, callback?: (mode?: string) => void) {\n        // Wait until some necessary items are loaded before starting the server\n        const corePreloader = async (): Promise<void> => {\n            return new Promise((resolve) => {\n                const interval = setInterval(() => {\n                    if (this.routesLoaded && this.configsLoaded) {\n                        logger.info(\"All plugins and routes loaded\");\n                        clearInterval(interval);\n                        resolve();\n                    } else if (this.passRoutes) {\n                        clearInterval(interval);\n                        resolve();\n                    }\n                }, 100);\n            });\n        };\n\n        await this.#loadConfig();\n\n        await this.#initializePlugins();\n\n        // Wait for necessary items to be loaded\n        await corePreloader();\n\n        const httpHandler = async (req: http.IncomingMessage, res: http.ServerResponse) => {\n            try {\n                await getRequestBody(req)\n\n                this.#handleRequest(req, res)\n            } catch (error) {\n                logger.error(error, \"Unexpected core error\")\n            }\n        }\n\n        const portHandler = (mode: string) => {\n            switch (mode) {\n                case \"http\":\n                    if (typeof port === \"object\") {\n                        return port.http\n                    } else {\n                        return port\n                    }\n                case \"https\":\n                    if (typeof port === \"object\") {\n                        return port.https\n                    } else {\n                        return 8443\n                    }\n                default:\n                    return 8000\n            }\n        }\n\n        const isHttpsActive = () => Object.keys(this.config.HTTPS || {}).length > 0;\n        let httpsServer;\n\n        if (isHttpsActive()) {\n            httpsServer = https.createServer(this.config.HTTPS || {}, httpHandler);\n        }\n        const httpServer = http.createServer(httpHandler)\n\n        if (!callback) {\n            callback = (mode?: string) => {\n                if (mode === \"https\") {\n                    if (isHttpsActive()) {\n                        logger.core(colors.whiteBright(`Server started on https://${host}:${portHandler(\"https\")}`));\n                    }\n                } else if (mode === \"http\") {\n                    logger.core(colors.whiteBright(`Server started on http://${host}:${portHandler(\"http\")}`));\n                }\n            }\n        }\n\n        // running web servers\n        httpsServer?.listen(portHandler(\"https\"), host, () => callback(\"https\"));\n        httpServer.listen(portHandler(\"http\"), host, () => callback(\"http\"));\n\n        httpsServer?.on('error', (e) => {\n            logger.error(e, `Starting server failed`)\n            process.exit(-1)\n        });\n\n        httpServer.on('error', (e) => {\n            logger.error(e, `Starting server failed`)\n            process.exit(-1)\n        });\n    }\n}","import pino from 'pino';\nimport pretty from 'pino-pretty';\n\nconst prettyStream = pretty({\n  colorize: true,\n  translateTime: 'HH:MM:ss.l',\n  ignore: 'pid,hostname',\n  customLevels: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    request: 35,  // HTTP request logs\n    core: 34,     // Core system messages\n    coreDebug: 33, // Core debug messages\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  customColors: 'fatal:red,error:red,core:magenta,coreDebug:blue,request:cyan,info:green,debug:yellow,trace:white',\n});\n\nconst logger = pino(\n  {\n    level: 'info',\n    customLevels: {\n      fatal: 60,\n      error: 50,\n      warn: 40,\n      request: 35,\n      core: 34,\n      coreDebug: 33,\n      info: 30,\n      debug: 20,\n      trace: 10\n    },\n    useOnlyCustomLevels: false\n  },\n  prettyStream\n);\n\nexport {\n  logger\n}","const addRoutePrefix = (route: string, prefix: string) => {\n    route = route.toString()\n    prefix = prefix.toString()\n    \n    if (route[0] === \"/\")\n        route = route.slice(1, route.length)\n\n    if (prefix[prefix.length - 1] === \"/\")\n        prefix = prefix.slice(0, prefix.length - 1)\n\n    if (prefix[0] !== \"/\")\n        prefix = `/${prefix}`\n\n    route = `${prefix}/${route}`\n\n    return route\n}\n\nexport default addRoutePrefix","import { IncomingMessage } from \"http\";\n\nconst getRequestBody = async (req: IncomingMessage): Promise<string | Record<string, string | undefined> | undefined> => {\n    return new Promise((resolve, reject) => {\n        let body = '';\n\n        // Listen for data events\n        req.on('data', (chunk) => {\n            body += chunk.toString();\n        });\n\n        req.on('end', () => {\n            try {\n                req.body = JSON.parse(body);\n                resolve(req.body);\n            } catch (error) {\n                req.body = body;\n                resolve(req.body);\n            }\n        });\n\n        req.on('error', (error) => {\n            reject(error);\n        });\n    });\n}\n\nexport default getRequestBody","import { ExceptionMeta, RouterExceptionError } from \"../../types/GlobalTypes\";\n\nclass RouterException extends Error {\n    public name: string;\n    private meta: ExceptionMeta;\n\n    constructor(error: RouterExceptionError) {\n        super(error.msg)\n        this.name = error.name\n        this.meta = error.meta\n    }\n}\n\nexport default RouterException;","import RouterException from \"../../Router/exceptions/RouterException\"\nimport { HttpMethods } from \"../../types/GlobalTypes\"\n\n/**\n * throw new route duplicate error from core to client\n * @param method Http method\n * @param route Http request route\n */\nconst routeDuplicateException = (method: keyof HttpMethods, route: string) => {\n    throw new RouterException({\n        msg: \"Duplicated route!\",\n        name: \"RouterError -> DUPLICATED_ROUTE\",\n        meta: {\n            type: \"DUPLICATED_ROUTE\",\n            description: `route \"${method} ${route}\" is duplicated`\n        }\n    })\n}\n\nexport {\n    routeDuplicateException\n}","import { AxonPlugin } from \"../../types/PluginTypes\";\nimport AxonCore from \"../AxonCore\";\nimport { logger } from \"../utils/coreLogger\";\n\nexport class PluginLoader {\n    private plugins: AxonPlugin[] = [];\n\n    async loadPlugin(plugin: AxonPlugin) {\n        plugin.name = plugin.name.replace(\" \", \"-\");\n        plugin.version = plugin.version.replace(\" \", \"-\");\n        this.plugins.push(plugin);\n        logger.debug(`Plugin ${plugin.name} (${plugin.version}) loaded`);\n    }\n\n    async initializePlugins(core: AxonCore) {\n        this.plugins.forEach(async (plugin) => {\n            await plugin.init(core);\n            logger.info(`Plugin ${plugin.name} (${plugin.version}) initialized`)\n        })\n    }\n\n    async getPlugins(): Promise<AxonPlugin[]> {\n        return this.plugins;\n    }\n}","import { Response } from \"../..\";\n\nclass AxonResponse {\n    private res: Response;\n\n    constructor(res: Response) {\n        this.res = res;\n    }\n\n    /**\n     * to add custom response message\n     */\n    public message(message: string) {\n        this.res.statusMessage = message;\n\n        return new Proxy(this, {\n            get(target, prop) {\n                if (prop === 'message') {\n                    throw new Error(\"Cannot access 'message' method after it has been called.\");\n                }\n                return target[prop as keyof typeof target];\n            }\n        });\n    }\n\n    /**\n     * to add body for send to client as a response body.\n     * \n     * **calling this method will send response to user, so ensure you called all methods which you want before this**\n     * @param body the body of response to client\n     */\n    public body(body: string | object) {\n        switch (typeof body) {\n            case \"string\":\n                this.res.setHeader(\"Content-Type\", \"text/plain\");\n                break;\n            case \"object\":\n                this.res.setHeader(\"Content-Type\", \"application/json\");\n                body = JSON.stringify(body);\n                break;\n            default:\n                this.res.setHeader(\"Content-Type\", \"application/json\");\n                body = JSON.stringify({});\n                break;\n        }\n\n        this.res.end(body);\n    }\n\n    public setHeader(key: string, value: string) {\n        this.res.setHeader((key as string), value);\n\n        return this;\n    }\n}\n\nexport default AxonResponse;","import assign from \"object-assign\";\nimport { nextFn, Request, Response } from \"../..\";\nimport vary from \"vary\";\n\nconst defaults = {\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    preflightContinue: false,\n    optionsSuccessStatus: 204\n}\n\nconst isString = (s: any) => {\n    return typeof s === 'string' || s instanceof String;\n}\n\nconst isOriginAllowed = async (origin: any, allowedOrigin: any) => {\n    if (Array.isArray(allowedOrigin)) {\n        for (let i = 0; i < allowedOrigin.length; ++i) {\n            if (await isOriginAllowed(origin, allowedOrigin[i])) {\n                return true;\n            }\n        }\n        return false;\n    } else if (isString(allowedOrigin)) {\n        return origin === allowedOrigin;\n    } else if (allowedOrigin instanceof RegExp) {\n        return allowedOrigin.test(origin);\n    } else {\n        return !!allowedOrigin;\n    }\n}\n\nconst configureOrigin = async (options: any, req: Request) => {\n    let requestOrigin = req.headers.origin,\n        headers = [],\n        isAllowed;\n\n    if (!options.origin || options.origin === '*') {\n        // allow any origin\n        headers.push([{\n            key: 'Access-Control-Allow-Origin',\n            value: '*'\n        }]);\n    } else if (isString(options.origin)) {\n        // fixed origin\n        headers.push([{\n            key: 'Access-Control-Allow-Origin',\n            value: options.origin\n        }]);\n        headers.push([{\n            key: 'Vary',\n            value: 'Origin'\n        }]);\n    } else {\n        isAllowed = await isOriginAllowed(requestOrigin, options.origin);\n        // reflect origin\n        headers.push([{\n            key: 'Access-Control-Allow-Origin',\n            value: isAllowed ? requestOrigin : false\n        }]);\n        headers.push([{\n            key: 'Vary',\n            value: 'Origin'\n        }]);\n    }\n\n    return headers;\n}\n\nconst configureMethods = async (options: any) => {\n    let methods = options.methods;\n    if (methods.join) {\n        methods = options.methods.join(','); // .methods is an array, so turn it into a string\n    }\n    return {\n        key: 'Access-Control-Allow-Methods',\n        value: methods\n    };\n}\n\nconst configureCredentials = async (options: any) => {\n    if (options.credentials === true) {\n        return {\n            key: 'Access-Control-Allow-Credentials',\n            value: 'true'\n        };\n    }\n    return null;\n}\n\nconst configureAllowedHeaders = async (options: any, req: Request) => {\n    let allowedHeaders = options.allowedHeaders || options.headers;\n    const headers = [];\n\n    if (!allowedHeaders) {\n        allowedHeaders = req.headers['access-control-request-headers']; // .headers wasn't specified, so reflect the request headers\n        headers.push([{\n            key: 'Vary',\n            value: 'Access-Control-Request-Headers'\n        }]);\n    } else if (allowedHeaders.join) {\n        allowedHeaders = allowedHeaders.join(','); // .headers is an array, so turn it into a string\n    }\n    if (allowedHeaders && allowedHeaders.length) {\n        headers.push([{\n            key: 'Access-Control-Allow-Headers',\n            value: allowedHeaders\n        }]);\n    }\n\n    return headers;\n}\n\nconst configureExposedHeaders = async (options: any) => {\n    let headers = options.exposedHeaders;\n    if (!headers) {\n        return null;\n    } else if (headers.join) {\n        headers = headers.join(','); // .headers is an array, so turn it into a string\n    }\n    if (headers && headers.length) {\n        return {\n            key: 'Access-Control-Expose-Headers',\n            value: headers\n        };\n    }\n    return null;\n}\n\nconst configureMaxAge = async (options: any) => {\n    const maxAge = (typeof options.maxAge === 'number' || options.maxAge) && options.maxAge.toString()\n    if (maxAge && maxAge.length) {\n        return {\n            key: 'Access-Control-Max-Age',\n            value: maxAge\n        };\n    }\n    return null;\n}\n\nconst applyHeaders = async (headers: any, res: Response) => {\n    for (let i = 0, n = headers.length; i < n; i++) {\n        const header = headers[i];\n        if (header) {\n            if (Array.isArray(header)) {\n                applyHeaders(header, res);\n            } else if (header.key === 'Vary' && header.value) {\n                vary(res, header.value);\n            } else if (header.value) {\n                res.setHeader(header.key, header.value);\n            }\n        }\n    }\n}\n\nconst cors = async (options: any, req: Request, res: Response, next: nextFn) => {\n    const headers = [],\n        method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n\n    if (method === 'OPTIONS') {\n        // preflight\n        headers.push(await configureOrigin(options, req));\n        headers.push(await configureCredentials(options))\n        headers.push(await configureMethods(options))\n        headers.push(await configureAllowedHeaders(options, req));\n        headers.push(await configureMaxAge(options))\n        headers.push(await configureExposedHeaders(options))\n        await applyHeaders(headers, res);\n\n        if (options.preflightContinue) {\n            await next();\n        } else {\n            // Safari (and potentially other browsers) need content-length 0,\n            //   for 204 or they just hang waiting for a body\n            res.statusCode = options.optionsSuccessStatus;\n            res.setHeader('Content-Length', '0');\n            res.end();\n        }\n    } else {\n        // actual response\n        headers.push(await configureOrigin(options, req));\n        headers.push(await configureCredentials(options))\n        headers.push(await configureExposedHeaders(options))\n        await applyHeaders(headers, res);\n        await next();\n    }\n}\n\nconst middlewareWrapper = async (o?: any) => {\n    // if options are static (either via defaults or custom options passed in), wrap in a function\n    let optionsCallback: (req: Request, cb: any) => Promise<void>;\n    if (typeof o === 'function') {\n        optionsCallback = o;\n    } else {\n        optionsCallback = async (req: Request, cb: any) => {\n            await cb(null, o);\n        };\n    }\n\n    return async (req: Request, res: Response, next: nextFn) => {\n        await optionsCallback(req, async (err: any, options: any) => {\n            if (err) {\n                return res.status(500).body({\n                    err: err,\n                    meta: {\n                        module: \"AxonCors\",\n                        root: \"optionsCallback\",\n                        line: 203\n                    }\n                });\n                // await next(err);\n            } else {\n                const corsOptions = assign({}, defaults, options);\n                let originCallback = null;\n                if (corsOptions.origin && typeof corsOptions.origin === 'function') {\n                    originCallback = corsOptions.origin;\n                } else if (corsOptions.origin) {\n                    originCallback = async (origin: any, cb: any) => {\n                        await cb(null, corsOptions.origin);\n                    };\n                }\n\n                if (originCallback) {\n                    await originCallback(req.headers.origin, async (err2: any, origin: any) => {\n                        if (err2 || !origin) {\n                            return res.status(500).body({\n                                err: err,\n                                meta: {\n                                    module: \"AxonCors\",\n                                    root: \"optionsCallback\",\n                                    line: 225\n                                }\n                            });\n                            // await next(err2);\n                        } else {\n                            corsOptions.origin = origin;\n                            await cors(corsOptions, req, res, next);\n                        }\n                    });\n                } else {\n                    await next();\n                }\n            }\n        });\n    };\n}\n\nexport default {\n    middlewareWrapper\n};","// libs\nimport { lilconfig } from 'lilconfig';\nimport { transformSync } from 'esbuild';\nimport { readFileSync } from 'fs';\nimport { pathToFileURL } from 'url';\n\n// utils\nimport { logger } from '../utils/coreLogger';\n\n// types\nimport type { AxonConfig } from \"../../types/ConfigTypes\";\n\n// default items\nimport defaultConfig from './defaultConfig';\n\nconst dynamicImport = new Function('file', 'return import(file)');\n\nasync function loadJSConfig(filePath: string) {\n    const fileUrl = pathToFileURL(filePath).href;\n    const module = await dynamicImport(fileUrl);\n    return module.default || module;\n}\n\nfunction loadTSConfig(filePath: string) {\n    const content = readFileSync(filePath, 'utf8');\n    const { code } = transformSync(content, {\n        loader: 'ts',\n        target: 'es2020',\n        format: 'cjs',\n    });\n\n    // Use the transformed code as CommonJS\n    const module = { exports: {} };\n    const fn = new Function('module', 'exports', 'require', code);\n    fn(module, module.exports, require);\n    return module.exports;\n}\n\nexport async function resolveConfig(): Promise<AxonConfig> {\n    const explorer = lilconfig('axon', {\n        searchPlaces: [\n            'axon.config.ts',\n            'axon.config.js',\n            'axon.config.cjs',\n            'axon.config.mjs',\n        ],\n        loaders: {\n            '.ts': (filePath) => loadTSConfig(filePath),\n            '.mjs': (filePath) => loadJSConfig(filePath),\n            '.js': (filePath) => require(filePath),\n            '.cjs': (filePath) => require(filePath),\n        }\n    });\n\n    const result = await explorer.search(process.cwd());\n\n    if (!result?.config) return defaultConfig;\n\n    if (Object.keys(result.config).includes(\"default\")) result.config = result.config?.default;\n\n    const config = { ...defaultConfig, ...result.config };\n\n    if (config.DEBUG) {\n        logger.level = \"debug\"\n    }\n\n    if (!config.LOGGER) {\n        logger.level = \"silent\"\n    }\n\n    logger.debug(config, \"Loaded config\");\n\n    return config;\n}","// types\nimport type { AxonConfig } from \"../../types/ConfigTypes\";\n\nexport default {\n    DEBUG: false,\n    LOGGER: true,\n    LOGGER_VERBOSE: false,\n    RESPONSE_MESSAGES: {\n        notFound: \"Not found\",\n        serverError: \"Internal server error\",\n        methodNotAllowed: \"Method {method} not allowed\"\n    },\n    CORS: {\n        origin: '*',\n        methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n        preflightContinue: false\n    },\n    HTTPS: {}\n} as AxonConfig;","import AxonRouter from \"../../Router/AxonRouter\";\nimport { HttpMethods } from \"../../types/GlobalTypes\";\nimport { logger } from \"../utils/coreLogger\";\n\ninterface UnloadRouteParams {\n    router?: AxonRouter;\n    method?: keyof HttpMethods;\n    route?: string;\n    _routes: HttpMethods;\n}\n\nexport type UnloadRoute = ({ }: UnloadRouteParams) => Promise<void>;\n\nexport const unloadRouteService: UnloadRoute = async ({ route, method, router, _routes }) => {\n    if (router) {\n        const routerRoutes: HttpMethods = router.exportRoutes();\n\n        (Object.keys(routerRoutes) as Array<keyof HttpMethods>).forEach((method) => {\n            if (Object.keys(routerRoutes[method]).length > 0) {\n                Object.keys(routerRoutes[method]).forEach((route) => {\n                    if (_routes[method][route]) {\n                        delete _routes[method][route]\n                        delete _routes['OPTIONS'][route]\n\n                        logger.debug(`unloaded route ${method} ${route}`)\n                    }\n                })\n            }\n        })\n    }\n\n    if (method) {\n        _routes[method] = {};\n\n        logger.debug(`unloaded method ${method} routes`)\n    }\n\n    if (route) {\n        let deleted = false;\n        (Object.keys(_routes) as Array<keyof HttpMethods>).forEach((method) => {\n            if (Object.keys(_routes[method]).length > 0) {\n                Object.keys(_routes[method]).forEach((_route) => {\n                    if (_route === route) {\n                        delete _routes[method][_route]\n                        delete _routes['OPTIONS'][_route]\n\n                        deleted = true;\n\n                        logger.debug(`unloaded route ${method} ${_route}`)\n                    }\n                })\n            }\n        })\n\n        if (!deleted) logger.debug(`route ${route} not found`)\n    }\n}\n\nexport const unloadRoutesService = async (_routes: HttpMethods) => {\n    (Object.keys(_routes) as Array<keyof HttpMethods>).forEach(method => {\n        _routes[method] = {};\n    });\n\n    logger.debug(\"all routes unloaded\")\n\n    return _routes;\n}","import RouterException from \"./exceptions/RouterException\";\nimport { Controller, HttpMethods, Middleware } from \"../types/GlobalTypes\";\n\nconst duplicateError = (path: string, method: keyof HttpMethods) => {\n    throw new RouterException({\n        msg: \"Duplicated route!\",\n        name: \"RouterError -> DUPLICATED_ROUTE\",\n        meta: {\n            type: \"DUPLICATED_ROUTE\",\n            description: `route \"${method} ${path}\" is duplicated`\n        }\n    })\n}\n\nexport class AxonRouteHandler {  \n    private controller: Controller;  \n    private middlewares: Middleware[];  \n\n    constructor(controller: Controller) {  \n        this.controller = controller;  \n        this.middlewares = [];  \n    }  \n\n    middleware(fn: Middleware) {  \n        this.middlewares.push(fn);\n        return this;\n    }  \n\n    getController() {  \n        return this.controller;  \n    }  \n\n    getMiddlewares() {  \n        return this.middlewares;  \n    }  \n}  \n\nclass AxonRouter {\n    private routes: HttpMethods;\n    constructor() {\n        this.routes = {\n            GET: {},\n            POST: {},\n            PUT: {},\n            PATCH: {},\n            DELETE: {},\n            OPTIONS: {}\n        }\n    }\n\n    /**\n     * Endpoint with method GET\n     * \n     * The purpose of the GET method is to simply retrieve data from the server. The GET method is used to request any of the following resources:\n     * - A webpage or HTML file.\n     * - An image or video.\n     * - A JSON document.\n     * - A CSS file or JavaScript file.\n     * - An XML file.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public get(path: string, controller: Controller) {\n        if (this.routes.GET[path]) {\n            duplicateError(path, \"GET\")\n        }\n        \n        const handler = new AxonRouteHandler(controller);\n        this.routes.GET[path] = handler\n\n        return handler;\n    }\n\n    /**\n     * Endpoint with method POST\n     * \n     * The POST HTTP request method sends data to the server for processing.\n     * \n     * The data sent to the server is typically in the following form:\n     * - Input fields from online forms.\n     * - XML or JSON data.\n     * - Text data from query parameters.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public post(path: string, controller: Controller) {\n        if (this.routes.POST[path]) {\n            duplicateError(path, \"POST\")\n        }\n\n        const handler = new AxonRouteHandler(controller);\n        this.routes.POST[path] = handler\n\n        return handler;\n    }\n\n    /**\n     * Endpoint with method PUT\n     * \n     * The PUT HTTP request method sends data to the server for replacing and changing full state.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public put(path: string, controller: Controller) {\n        if (this.routes.PUT[path]) {\n            duplicateError(path, \"PUT\")\n        }\n\n        const handler = new AxonRouteHandler(controller);\n        this.routes.PUT[path] = handler\n\n        return handler;\n    }\n\n    /**\n     * Endpoint with method PATCH\n     * \n     * The PATCH HTTP request method sends data to the server for editing part of a data.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public patch(path: string, controller: Controller) {\n        if (this.routes.PATCH[path]) {\n            duplicateError(path, \"PATCH\")\n        }\n\n        const handler = new AxonRouteHandler(controller);\n        this.routes.PATCH[path] = handler\n\n        return handler;\n    }\n\n    /**\n     * Endpoint with method DELETE\n     * \n     * The DELETE HTTP request method sends data to the server for deleting a data.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public delete(path: string, controller: Controller) {\n        if (this.routes.DELETE[path]) {\n            duplicateError(path, \"DELETE\")\n        }\n\n        const handler = new AxonRouteHandler(controller);\n        this.routes.DELETE[path] = handler\n\n        return handler;\n    }\n\n    /**\n     * Endpoint with method OPTIONS\n     * \n     * The HTTP OPTIONS method returns a listing of which HTTP methods are supported and allowed.\n     * @param path route path\n     * @param controller route request controller\n     */\n    public options(path: string, controller: Controller) {\n        if (this.routes.OPTIONS[path]) {\n            duplicateError(path, \"OPTIONS\")\n        }\n\n        const handler = new AxonRouteHandler(controller);\n        this.routes.OPTIONS[path] = handler\n\n        return handler;\n    } \n\n    exportRoutes() {\n        return this.routes\n    }\n}\n\nexport default AxonRouter;"],"mappings":"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","names":["pretty","pino","vary","assign","module","method","route","index"]}