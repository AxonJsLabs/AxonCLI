{"version":3,"sources":["../src/cli.ts","../src/commands/createProject.ts","../src/utils/templateManager.ts","../src/commands/makeController.ts","../src/utils/projectRoot.ts","../src/commands/makeMiddleware.ts","../src/commands/makeRouter.ts","../src/commands/routeList.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport { Command } from 'commander';\r\nimport chalk from 'chalk';\r\nimport { createProject } from './commands/createProject';\r\nimport { makeController } from './commands/makeController';\r\nimport { makeMiddleware } from './commands/makeMiddleware';\r\nimport { makeRouter } from './commands/makeRouter';\r\nimport { routeList } from './commands/routeList';\r\n// import { createApi } from './commands/createApi';\r\n// import { listRoutes } from './commands/listRoutes';\r\n\r\ninterface Commands {\r\n  [key: string]: string;\r\n}\r\n\r\nconst createCommands: Commands = {\r\n  project: \"Scaffold a new AxonJs project with MVC structure\"\r\n}\r\n\r\nconst makeCommands: Commands = {\r\n  controller: \"Create a controller in src/controllers\",\r\n  middleware: \"Create a middleware in src/middlewares\",\r\n  router: \"Create a router in src/routers\"\r\n}\r\n\r\nconst program = new Command();\r\n\r\nprogram\r\n  .name('axon')\r\n  .description('A complete tool for managing AxonJs projects')\r\n  .usage('<command> [options]')\r\n  .helpOption('-h, --help', 'Display help for command')\r\n  .version('0.1.0');\r\n\r\nprogram\r\n  .command('create')\r\n  .description('List of `create` commands')\r\n  .action(() => {\r\n    console.log(chalk.yellow('Available `create` commands:'));\r\n\r\n    Object.keys(createCommands).forEach(cmd => {\r\n      console.log(chalk.green(`- ${cmd}: `) + chalk.white(createCommands[cmd]));\r\n    });\r\n  });\r\n\r\nprogram\r\n  .command('make')\r\n  .description('List of `make` commands')\r\n  .action(() => {\r\n    console.log(chalk.yellow('Available `make` commands:'));\r\n\r\n    Object.keys(makeCommands).forEach(cmd => {\r\n      console.log(chalk.green(`- ${cmd}: `) + chalk.white(makeCommands[cmd]));\r\n    });\r\n  });\r\n\r\n// Command: Create project\r\nprogram\r\n  .command('create:project')\r\n  .description(createCommands.project)\r\n  .action(createProject);\r\n\r\n// Command: Create controller\r\nprogram\r\n  .command('make:controller <name>')\r\n  .description(makeCommands.controller)\r\n  .action(makeController);\r\n\r\n// Command: Create middleware\r\nprogram\r\n  .command('make:middleware <name>')\r\n  .description(makeCommands.middleware)\r\n  .action(makeMiddleware);\r\n\r\n// Command: Create router\r\nprogram\r\n  .command('make:router <name>')\r\n  .description(makeCommands.router)\r\n  .action(makeRouter);\r\n\r\nprogram\r\n  .command('route:list')\r\n  .description('List all routes in the project')\r\n  .action(routeList);\r\n\r\n// // Command: Create API (router, controller, middleware)\r\n// program\r\n//   .command('create:api <name>')\r\n//   .description('Create API components for a resource')\r\n//   .action(createApi);\r\n\r\nprogram.parse(process.argv);\r\n","import inquirer from 'inquirer';\r\nimport fs from 'fs-extra';\r\nimport path from 'path';\r\nimport chalk from 'chalk';\r\nimport ora from 'ora';\r\nimport { cloneGithubTemplate } from '../utils/templateManager';\r\n\r\nexport async function createProject() {\r\n  let answers;\r\n  try {\r\n    answers = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'language',\r\n        message: 'Select project language:',\r\n        choices: ['JavaScript', 'TypeScript']\r\n      },\r\n      {\r\n        type: 'input',\r\n        name: 'projectName',\r\n        message: 'Project name:',\r\n        default: 'axon-project'\r\n      }\r\n    ]);\r\n  } catch (error) {\r\n    console.log(chalk.magenta('Aborted, Goodbye!'));\r\n    process.exit(1);\r\n  }\r\n\r\n  const { language, projectName } = answers;\r\n  const projectDir = path.join(process.cwd(), projectName);\r\n\r\n  if (fs.existsSync(projectDir)) {\r\n    console.error(chalk.red(`Directory ${projectName} already exists.`));\r\n    process.exit(1);\r\n  }\r\n\r\n  fs.mkdirSync(projectDir);\r\n\r\n  const spinner = ora('Cloning template from GitHub...').start();\r\n  try {\r\n    await cloneGithubTemplate(language, projectDir);\r\n    spinner.succeed('Template cloned successfully.');\r\n\r\n    const packageJsonPath = path.join(projectDir, 'package.json');\r\n    const packageJson = fs.readJsonSync(packageJsonPath);\r\n    packageJson.name = projectName;\r\n    fs.writeJsonSync(packageJsonPath, packageJson, { spaces: 2 });\r\n\r\n    console.log(chalk.green('Base project created successfully using the', language, 'template!'));\r\n    console.log(chalk.blue('‚ú® Run the following commands to start the project:'));\r\n    console.log(chalk.white(`cd ${projectName}`));\r\n    console.log(chalk.white('npm install'));\r\n    console.log(chalk.white('npm start\\n'));\r\n    console.log(chalk.magenta('Happy coding! Thanks for using Axon üåü‚ù§Ô∏è'));\r\n  } catch (error) {\r\n    spinner.fail('Template cloning failed.');\r\n    console.error(error);\r\n    process.exit(1);\r\n  }\r\n}\r\n","import degit from 'degit';\r\nimport fs from \"fs\";\r\nimport ejs from \"ejs\";\r\n\r\n/**\r\n * Clones a GitHub template repository based on the chosen language.\r\n * @param language - Either 'JavaScript' or 'TypeScript'\r\n * @param targetDir - Destination directory for the new project\r\n */\r\nasync function cloneGithubTemplate(language: string, targetDir: string): Promise<void> {\r\n  const repo = language === 'TypeScript'\r\n    ? 'AxonJsLabs/Axon-template-ts#main'\r\n    : 'AxonJsLabs/Axon-template-js#main';\r\n    \r\n  const emitter = degit(repo, {\r\n    cache: false,\r\n    force: true,\r\n    verbose: true,\r\n  });\r\n  \r\n  await emitter.clone(targetDir);\r\n}\r\n\r\nconst generateFile = (templatePath: string, outputPath: string, data: object): void => {\r\n    const templateContent = fs.readFileSync(templatePath, 'utf-8');\r\n\r\n    const renderer = ejs.render(templateContent, data);\r\n\r\n    fs.writeFileSync(outputPath, renderer, 'utf-8');\r\n}\r\n\r\nexport {\r\n  generateFile,\r\n  cloneGithubTemplate\r\n}","import fs from \"fs\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\nimport { generateFile } from \"../utils/templateManager\";\r\nimport { findProjectRoot } from \"../utils/projectRoot\";\r\n\r\nexport async function makeController(name: string) {\r\n    try {\r\n        const currentDir = process.cwd();\r\n        const projectDir = findProjectRoot(currentDir);\r\n        const controllersDir = path.join(projectDir, 'src', 'controllers');\r\n\r\n        let answers;\r\n        try {\r\n            answers = await inquirer.prompt([\r\n                {\r\n                    type: 'list',\r\n                    name: 'language',\r\n                    message: 'Select project language:',\r\n                    choices: ['JavaScript', 'TypeScript']\r\n                }\r\n            ]);\r\n        } catch (error) {\r\n            console.log(chalk.magenta('Aborted. Goodbye!'));\r\n            process.exit(1);\r\n        }\r\n\r\n        const { language } = answers;\r\n        const format = language === 'TypeScript' ? 'ts' : 'js';\r\n\r\n        const nameParts = name.split('/').filter(part => part.trim() !== '');\r\n        if (nameParts.length === 0) {\r\n            console.error(chalk.red(`‚ùå Invalid controller name: ${name}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        const fileName = nameParts.pop()!;\r\n        const directories = nameParts;\r\n\r\n        const targetDir = path.join(controllersDir, ...directories);\r\n        if (!fs.existsSync(targetDir)) {\r\n            fs.mkdirSync(targetDir, { recursive: true });\r\n        }\r\n\r\n        const controllerName = `${fileName}.controller.${format}`;\r\n        const controllerTemplate = path.join(__dirname, 'templates', 'controller', `controller.${format}.ejs`);\r\n        const controllerOutput = path.join(targetDir, controllerName);\r\n\r\n        if (fs.existsSync(controllerOutput)) {\r\n            console.error(chalk.red(`‚ùå Controller '${controllerName}' already exists in ${path.relative(projectDir, targetDir)}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        generateFile(controllerTemplate, controllerOutput, { controllerName: fileName });\r\n\r\n        const relativePath = path.relative(projectDir, targetDir);\r\n        const successMessage = chalk.green(`‚úÖ Successfully created ${controllerName} in ${relativePath}`);\r\n\r\n        console.log(successMessage);\r\n    } catch (error) {\r\n        console.error(chalk.red('‚ùå Error:', error));\r\n        process.exit(1);\r\n    }\r\n}","import path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport function findProjectRoot(currentDir: string): string {\r\n    const { root } = path.parse(currentDir);\r\n    let dir = currentDir;\r\n\r\n    while (dir !== root) {\r\n        const packagePath = path.join(dir, 'package.json');\r\n        if (fs.existsSync(packagePath)) {\r\n            return dir;\r\n        }\r\n        dir = path.dirname(dir);\r\n    }\r\n\r\n    console.error(\"‚ùå Could not find project root.\");\r\n    process.exit(1);\r\n}","import fs from \"fs\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\nimport { generateFile } from \"../utils/templateManager\";\r\nimport { findProjectRoot } from \"../utils/projectRoot\";\r\n\r\nexport async function makeMiddleware(name: string) {\r\n    try {\r\n        const currentDir = process.cwd();\r\n        const projectDir = findProjectRoot(currentDir);\r\n        const middlewaresDir = path.join(projectDir, 'src', 'middlewares');\r\n\r\n        let answers;\r\n        try {\r\n            answers = await inquirer.prompt([\r\n                {\r\n                    type: 'list',\r\n                    name: 'language',\r\n                    message: 'Select project language:',\r\n                    choices: ['JavaScript', 'TypeScript']\r\n                }\r\n            ]);\r\n        } catch (error) {\r\n            console.log(chalk.magenta('Aborted. Goodbye!'));\r\n            process.exit(1);\r\n        }\r\n\r\n        const { language } = answers;\r\n        const format = language === 'TypeScript' ? 'ts' : 'js';\r\n\r\n        const nameParts = name.split('/').filter(part => part.trim() !== '');\r\n        if (nameParts.length === 0) {\r\n            console.error(chalk.red(`‚ùå Invalid middleware name: ${name}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        const fileName = nameParts.pop()!;\r\n        const directories = nameParts;\r\n\r\n        const targetDir = path.join(middlewaresDir, ...directories);\r\n        if (!fs.existsSync(targetDir)) {\r\n            fs.mkdirSync(targetDir, { recursive: true });\r\n        }\r\n\r\n        const middlewareName = `${fileName}.middleware.${format}`;\r\n        const middlewareTemplate = path.join(__dirname, 'templates', 'middleware', `middleware.${format}.ejs`);\r\n        const middlewareOutput = path.join(targetDir, middlewareName);\r\n\r\n        if (fs.existsSync(middlewareOutput)) {\r\n            console.error(chalk.red(`‚ùå Middleware '${middlewareName}' already exists in ${path.relative(projectDir, targetDir)}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        generateFile(middlewareTemplate, middlewareOutput, { middlewareName: fileName });\r\n\r\n        const relativePath = path.relative(projectDir, targetDir);\r\n        const successMessage = chalk.green(`‚úÖ Successfully created ${middlewareName} in ${relativePath}`);\r\n\r\n        console.log(successMessage);\r\n    } catch (error) {\r\n        console.error(chalk.red('‚ùå Error:', error));\r\n        process.exit(1);\r\n    }\r\n}","import fs from \"fs\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\nimport inquirer from \"inquirer\";\r\nimport { generateFile } from \"../utils/templateManager\";\r\nimport { findProjectRoot } from \"../utils/projectRoot\";\r\n\r\nexport async function makeRouter(name: string) {\r\n    try {\r\n        const currentDir = process.cwd();\r\n        const projectDir = findProjectRoot(currentDir);\r\n        const routersDir = path.join(projectDir, 'src', 'routers');\r\n\r\n        let answers;\r\n        try {\r\n            answers = await inquirer.prompt([\r\n                {\r\n                    type: 'list',\r\n                    name: 'language',\r\n                    message: 'Select project language:',\r\n                    choices: ['JavaScript', 'TypeScript']\r\n                }\r\n            ]);\r\n        } catch (error) {\r\n            console.log(chalk.magenta('Aborted. Goodbye!'));\r\n            process.exit(1);\r\n        }\r\n\r\n        const { language } = answers;\r\n        const format = language === 'TypeScript' ? 'ts' : 'js';\r\n\r\n        const nameParts = name.split('/').filter(part => part.trim() !== '');\r\n        if (nameParts.length === 0) {\r\n            console.error(chalk.red(`‚ùå Invalid router name: ${name}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        const fileName = nameParts.pop()!;\r\n        const directories = nameParts;\r\n\r\n        const targetDir = path.join(routersDir, ...directories);\r\n        if (!fs.existsSync(targetDir)) {\r\n            fs.mkdirSync(targetDir, { recursive: true });\r\n        }\r\n\r\n        const routerName = `${fileName}.route.${format}`;\r\n        const routerTemplate = path.join(__dirname, 'templates', 'router', `router.${format}.ejs`);\r\n        const routerOutput = path.join(targetDir, routerName);\r\n\r\n        if (fs.existsSync(routerOutput)) {\r\n            console.error(chalk.red(`‚ùå Router '${routerName}' already exists in ${path.relative(projectDir, targetDir)}`));\r\n            process.exit(1);\r\n        }\r\n\r\n        generateFile(routerTemplate, routerOutput, { routerName: fileName });\r\n\r\n        console.log(chalk.green(`‚úÖ Successfully created ${routerName} in ${path.relative(projectDir, targetDir)}`));\r\n    } catch (error) {\r\n        console.error(chalk.red('‚ùå Error:', error));\r\n        process.exit(1);\r\n    }\r\n}","import path from \"path\";\r\nimport fs from \"fs/promises\";\r\nimport { pathToFileURL } from \"url\";\r\nimport { AxonRouter } from \"@axonlabs/core\";\r\nimport chalk from \"chalk\";\r\nimport type { ChalkInstance as Chalk } from \"chalk\";\r\nimport Table from \"cli-table3\";\r\nimport { findProjectRoot } from \"../utils/projectRoot\";\r\n\r\n// Route Type Definitions\r\ninterface RouteObject {\r\n    file: string;\r\n    routes: Record<string, Record<string, Function>>;\r\n}\r\n\r\ninterface RouteEntry {\r\n    method: string;\r\n    route: string;\r\n    file: string;\r\n}\r\n\r\n/**\r\n * Loads a JavaScript/TypeScript file dynamically\r\n * @param {string} filePath - The file path\r\n * @returns {Promise<any>} - The loaded module\r\n */\r\nasync function loadFile(filePath: string): Promise<any> {\r\n    const fileUrl = pathToFileURL(filePath).href;\r\n    const module = await import(fileUrl);\r\n    return module.default || module;\r\n}\r\n\r\n/**\r\n * Recursively searches for route files\r\n * @param {string} dir - Directory to search\r\n * @returns {Promise<string[]>} - Array of file paths\r\n */\r\nconst findRouteFiles = async (dir: string): Promise<string[]> => {\r\n    let files: string[] = [];\r\n    try {\r\n        const entries = await fs.readdir(dir, { withFileTypes: true });\r\n        for (const entry of entries) {\r\n            const fullPath = path.join(dir, entry.name);\r\n            if (entry.isDirectory()) {\r\n                files.push(...(await findRouteFiles(fullPath)));\r\n            } else if (entry.isFile() && /\\.(route\\.(js|mjs|cjs|ts))$/i.test(entry.name)) {\r\n                files.push(fullPath);\r\n            }\r\n        }\r\n    } catch {\r\n        // Ignore if the directory does not exist\r\n    }\r\n    return files;\r\n};\r\n\r\n/**\r\n * Loads and extracts route data from a file\r\n * @param {string} filePath - The file path\r\n * @returns {Promise<RouteObject>} - Object containing file and its routes\r\n */\r\nconst loadRouteObject = async (filePath: string): Promise<RouteObject> => {\r\n    try {\r\n        const router = await loadFile(filePath);\r\n        let exportedRoutes: Record<string, any> = {};\r\n\r\n        if (typeof router !== \"object\" || router === null) {\r\n            return { file: filePath, routes: {} };\r\n        }\r\n\r\n        const proto = Object.getPrototypeOf(router);\r\n        if (proto && proto.constructor.name === \"AxonRouter\") {\r\n            return { file: filePath, routes: router.exportRoutes() as any };\r\n        }\r\n\r\n        Object.values(router).forEach((item) => {\r\n            if (typeof item === \"object\" && item !== null) {\r\n                const itemProto = Object.getPrototypeOf(item);\r\n                if (itemProto && itemProto.constructor.name === \"AxonRouter\") {\r\n                    exportedRoutes = { ...exportedRoutes, ...(item as AxonRouter).exportRoutes() };\r\n                }\r\n            }\r\n        });\r\n\r\n        return { file: filePath, routes: exportedRoutes };\r\n    } catch (err) {\r\n        console.error(`Error loading route ${filePath}:\\n`, err);\r\n        return { file: filePath, routes: {} };\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches all route files and extracts their routes\r\n * @returns {Promise<RouteObject[]>} - Array of route objects\r\n */\r\nconst routesList = async (): Promise<RouteObject[]> => {\r\n    try {\r\n        const baseDirs = [\"src/routers\", \"routers\"];\r\n        const currentDir = process.cwd();\r\n        const projectRoot = findProjectRoot(currentDir);\r\n\r\n        let allFiles: string[] = [];\r\n\r\n        for (const baseDir of baseDirs) {\r\n            const foundFiles = await findRouteFiles(path.resolve(projectRoot, baseDir));\r\n            allFiles.push(...foundFiles);\r\n        }\r\n\r\n        return await Promise.all(allFiles.map((file) => loadRouteObject(file)));\r\n    } catch (err) {\r\n        console.error(\"Error loading routes:\\n\", err);\r\n        return [];\r\n    }\r\n};\r\n\r\n// HTTP methods with colors\r\nconst methodColors: Record<string, Chalk> = {\r\n    GET: chalk.green.bold,\r\n    POST: chalk.yellow.bold,\r\n    PUT: chalk.blue.bold,\r\n    PATCH: chalk.magenta.bold,\r\n    DELETE: chalk.red.bold,\r\n    OPTIONS: chalk.cyan.bold\r\n};\r\n\r\n/**\r\n * Colors an HTTP method\r\n * @param {string} method - HTTP method\r\n * @returns {string} - Colored method name\r\n */\r\nconst colorMethod = (method: string): string => (methodColors[method] || chalk.white.bold)(method);\r\n\r\nconst calculateColumnWidths = (routes: { method: string; route: string; file: string }[]): number[] => {\r\n    const terminalWidth = process.stdout.columns || 80;\r\n    let maxMethod = 6, maxRoute = 10, maxFile = 10;\r\n\r\n    routes.forEach(({ method, route, file }) => {\r\n        maxMethod = Math.max(maxMethod, method.length);\r\n        maxRoute = Math.max(maxRoute, route.length);\r\n        maxFile = Math.max(maxFile, file.length);\r\n    });\r\n\r\n    let totalWidth = maxMethod + maxRoute + maxFile + 10;\r\n    if (totalWidth > terminalWidth) {\r\n        const excess = totalWidth - terminalWidth;\r\n        maxFile = Math.max(10, maxFile - excess);\r\n    } else {\r\n        const extra = terminalWidth - totalWidth;\r\n        maxRoute += Math.floor(extra * 0.6);\r\n        maxFile += Math.floor(extra * 0.4);\r\n    }\r\n\r\n    return [maxMethod, maxRoute, maxFile];\r\n};\r\n\r\n/**\r\n * Truncates a string if it exceeds the max length\r\n * @param {string} str - Input string\r\n * @param {number} maxLength - Maximum length allowed\r\n * @returns {string} - Truncated string if necessary\r\n */\r\nconst truncate = (str: string, maxLength: number): string =>\r\n    str.length > maxLength ? str.substring(0, maxLength - 3) + \"...\" : str;\r\n\r\n/**\r\n * Displays the list of routes in a table\r\n */\r\nconst routeList = async () => {\r\n    const routeFileObjects = await routesList();\r\n    const routeEntries: RouteEntry[] = [];\r\n\r\n    routeFileObjects.forEach(({ file, routes }) => {\r\n        Object.keys(routes).forEach((method) => {\r\n            Object.keys(routes[method]).forEach((routePath) => {\r\n                routeEntries.push({\r\n                    method,\r\n                    route: routePath,\r\n                    file: path.relative(process.cwd(), file)\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\n    if (routeEntries.length === 0) {\r\n        console.log(chalk.red(\"‚ùå No routes found.\"));\r\n        return;\r\n    }\r\n\r\n    const [methodCol, routeCol, fileCol] = calculateColumnWidths(routeEntries);\r\n\r\n    // Build the table\r\n    const table = new Table({\r\n        head: [chalk.blue.bold(\"Method\"), chalk.blue.bold(\"Route\"), chalk.blue.bold(\"Filename\")],\r\n        colWidths: [methodCol, routeCol, fileCol].map(width => Math.max(width, 10)),\r\n        wordWrap: true,\r\n        style: { head: [], border: [] }\r\n    });\r\n\r\n    // Add routes to the table\r\n    routeEntries.forEach(({ method, route, file }) => {\r\n        table.push([\r\n            colorMethod(method),\r\n            chalk.white(route),\r\n            chalk.yellow(truncate(file, Math.max(fileCol, 10)))\r\n        ]);\r\n    });\r\n\r\n    console.log(table.toString());\r\n};\r\n\r\nexport { routeList };\r\n"],"mappings":"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","names":["import_chalk","degit","fs","ejs","inquirer","chalk","path","fs","ora","import_fs","import_path","import_chalk","import_inquirer","import_path","import_fs","path","fs","path","inquirer","chalk","fs","import_fs","import_path","import_chalk","import_inquirer","path","inquirer","chalk","fs","import_fs","import_path","import_chalk","import_inquirer","path","inquirer","chalk","fs","import_path","import_chalk","module","fs","path","chalk","Table","chalk"]}