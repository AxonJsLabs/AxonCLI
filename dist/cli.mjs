#!/usr/bin/env node
import{Command as e}from"commander";import o from"chalk";import r from"inquirer";import t from"fs-extra";import c from"path";import s from"chalk";import n from"ora";import a from"degit";import i from"fs";import l from"ejs";var m=(e,o,r)=>{const t=i.readFileSync(e,"utf-8"),c=l.render(t,r);i.writeFileSync(o,c,"utf-8")};import p from"fs";import d from"path";import u from"chalk";import f from"inquirer";import g from"path";import h from"fs";function y(e){const{root:o}=g.parse(e);let r=e;for(;r!==o;){const e=g.join(r,"package.json");if(h.existsSync(e))return r;r=g.dirname(r)}console.error("‚ùå Could not find project root."),process.exit(1)}import j from"fs";import w from"path";import x from"chalk";import b from"inquirer";import S from"fs";import $ from"path";import v from"chalk";import k from"inquirer";import T from"path";import A from"fs/promises";import{pathToFileURL as E}from"url";import O from"chalk";import M from"cli-table3";var J=async e=>{let o=[];try{const r=await A.readdir(e,{withFileTypes:!0});for(const t of r){const r=T.join(e,t.name);t.isDirectory()?o.push(...await J(r)):t.isFile()&&/\.(route\.(js|mjs|cjs|ts))$/i.test(t.name)&&o.push(r)}}catch{}return o},C=async e=>{try{const o=await async function(e){const o=E(e).href,r=await import(o);return r.default||r}(e);let r={};if("object"!=typeof o||null===o)return{file:e,routes:{}};const t=Object.getPrototypeOf(o);return t&&"AxonRouter"===t.constructor.name?{file:e,routes:o.exportRoutes()}:(Object.values(o).forEach((e=>{if("object"==typeof e&&null!==e){const o=Object.getPrototypeOf(e);o&&"AxonRouter"===o.constructor.name&&(r={...r,...e.exportRoutes()})}})),{file:e,routes:r})}catch(o){return console.error(`Error loading route ${e}:\n`,o),{file:e,routes:{}}}},P={GET:O.green.bold,POST:O.yellow.bold,PUT:O.blue.bold,PATCH:O.magenta.bold,DELETE:O.red.bold,OPTIONS:O.cyan.bold},N=e=>(P[e]||O.white.bold)(e),R={project:"Scaffold a new AxonJs project with MVC structure"},G={controller:"Create a controller in src/controllers",middleware:"Create a middleware in src/middlewares",router:"Create a router in src/routers"},L=new e;L.name("axon").description("A complete tool for managing AxonJs projects").usage("<command> [options]").helpOption("-h, --help","Display help for command").version("0.1.0"),L.command("create").description("List of `create` commands").action((()=>{console.log(o.yellow("Available `create` commands:")),Object.keys(R).forEach((e=>{console.log(o.green(`- ${e}: `)+o.white(R[e]))}))})),L.command("make").description("List of `make` commands").action((()=>{console.log(o.yellow("Available `make` commands:")),Object.keys(G).forEach((e=>{console.log(o.green(`- ${e}: `)+o.white(G[e]))}))})),L.command("create:project").description(R.project).action((async function(){let e;try{e=await r.prompt([{type:"list",name:"language",message:"Select project language:",choices:["JavaScript","TypeScript"]},{type:"input",name:"projectName",message:"Project name:",default:"axon-project"}])}catch(e){console.log(s.magenta("Aborted, Goodbye!")),process.exit(1)}const{language:o,projectName:i}=e,l=c.join(process.cwd(),i);t.existsSync(l)&&(console.error(s.red(`Directory ${i} already exists.`)),process.exit(1)),t.mkdirSync(l);const m=n("Cloning template from GitHub...").start();try{await async function(e,o){const r=a("TypeScript"===e?"AxonJsLabs/Axon-template-ts#main":"AxonJsLabs/Axon-template-js#main",{cache:!1,force:!0,verbose:!0});await r.clone(o)}(o,l),m.succeed("Template cloned successfully.");const e=c.join(l,"package.json"),r=t.readJsonSync(e);r.name=i,t.writeJsonSync(e,r,{spaces:2}),console.log(s.green("Base project created successfully using the",o,"template!")),console.log(s.blue("‚ú® Run the following commands to start the project:")),console.log(s.white(`cd ${i}`)),console.log(s.white("npm install")),console.log(s.white("npm start\n")),console.log(s.magenta("Happy coding! Thanks for using Axon üåü‚ù§Ô∏è"))}catch(e){m.fail("Template cloning failed."),console.error(e),process.exit(1)}})),L.command("make:controller <name>").description(G.controller).action((async function(e){try{const o=y(process.cwd()),r=d.join(o,"src","controllers");let t;try{t=await f.prompt([{type:"list",name:"language",message:"Select project language:",choices:["JavaScript","TypeScript"]}])}catch(e){console.log(u.magenta("Aborted. Goodbye!")),process.exit(1)}const{language:c}=t,s="TypeScript"===c?"ts":"js",n=e.split("/").filter((e=>""!==e.trim()));0===n.length&&(console.error(u.red(`‚ùå Invalid controller name: ${e}`)),process.exit(1));const a=n.pop(),i=n,l=d.join(r,...i);p.existsSync(l)||p.mkdirSync(l,{recursive:!0});const g=`${a}.controller.${s}`,h=d.join(__dirname,"templates","controller",`controller.${s}.ejs`),j=d.join(l,g);p.existsSync(j)&&(console.error(u.red(`‚ùå Controller '${g}' already exists in ${d.relative(o,l)}`)),process.exit(1)),m(h,j,{controllerName:a});const w=d.relative(o,l),x=u.green(`‚úÖ Successfully created ${g} in ${w}`);console.log(x)}catch(e){console.error(u.red("‚ùå Error:",e)),process.exit(1)}})),L.command("make:middleware <name>").description(G.middleware).action((async function(e){try{const o=y(process.cwd()),r=w.join(o,"src","middlewares");let t;try{t=await b.prompt([{type:"list",name:"language",message:"Select project language:",choices:["JavaScript","TypeScript"]}])}catch(e){console.log(x.magenta("Aborted. Goodbye!")),process.exit(1)}const{language:c}=t,s="TypeScript"===c?"ts":"js",n=e.split("/").filter((e=>""!==e.trim()));0===n.length&&(console.error(x.red(`‚ùå Invalid middleware name: ${e}`)),process.exit(1));const a=n.pop(),i=n,l=w.join(r,...i);j.existsSync(l)||j.mkdirSync(l,{recursive:!0});const p=`${a}.middleware.${s}`,d=w.join(__dirname,"templates","middleware",`middleware.${s}.ejs`),u=w.join(l,p);j.existsSync(u)&&(console.error(x.red(`‚ùå Middleware '${p}' already exists in ${w.relative(o,l)}`)),process.exit(1)),m(d,u,{middlewareName:a});const f=w.relative(o,l),g=x.green(`‚úÖ Successfully created ${p} in ${f}`);console.log(g)}catch(e){console.error(x.red("‚ùå Error:",e)),process.exit(1)}})),L.command("make:router <name>").description(G.router).action((async function(e){try{const o=y(process.cwd()),r=$.join(o,"src","routers");let t;try{t=await k.prompt([{type:"list",name:"language",message:"Select project language:",choices:["JavaScript","TypeScript"]}])}catch(e){console.log(v.magenta("Aborted. Goodbye!")),process.exit(1)}const{language:c}=t,s="TypeScript"===c?"ts":"js",n=e.split("/").filter((e=>""!==e.trim()));0===n.length&&(console.error(v.red(`‚ùå Invalid router name: ${e}`)),process.exit(1));const a=n.pop(),i=n,l=$.join(r,...i);S.existsSync(l)||S.mkdirSync(l,{recursive:!0});const p=`${a}.route.${s}`,d=$.join(__dirname,"templates","router",`router.${s}.ejs`),u=$.join(l,p);S.existsSync(u)&&(console.error(v.red(`‚ùå Router '${p}' already exists in ${$.relative(o,l)}`)),process.exit(1)),m(d,u,{routerName:a}),console.log(v.green(`‚úÖ Successfully created ${p} in ${$.relative(o,l)}`))}catch(e){console.error(v.red("‚ùå Error:",e)),process.exit(1)}})),L.command("route:list").description("List all routes in the project").action((async()=>{const e=await(async()=>{try{const e=["src/routers","routers"],o=y(process.cwd());let r=[];for(const t of e){const e=await J(T.resolve(o,t));r.push(...e)}return await Promise.all(r.map((e=>C(e))))}catch(e){return console.error("Error loading routes:\n",e),[]}})(),o=[];if(e.forEach((({file:e,routes:r})=>{Object.keys(r).forEach((t=>{Object.keys(r[t]).forEach((r=>{o.push({method:t,route:r,file:T.relative(process.cwd(),e)})}))}))})),0===o.length)return void console.log(O.red("‚ùå No routes found."));const[r,t,c]=(e=>{const o=process.stdout.columns||80;let r=6,t=10,c=10;e.forEach((({method:e,route:o,file:s})=>{r=Math.max(r,e.length),t=Math.max(t,o.length),c=Math.max(c,s.length)}));let s=r+t+c+10;if(s>o){const e=s-o;c=Math.max(10,c-e)}else{const e=o-s;t+=Math.floor(.6*e),c+=Math.floor(.4*e)}return[r,t,c]})(o),s=new M({head:[O.blue.bold("Method"),O.blue.bold("Route"),O.blue.bold("Filename")],colWidths:[r,t,c].map((e=>Math.max(e,10))),wordWrap:!0,style:{head:[],border:[]}});o.forEach((({method:e,route:o,file:r})=>{var t,n;s.push([N(e),O.white(o),O.yellow((t=r,n=Math.max(c,10),t.length>n?t.substring(0,n-3)+"...":t))])})),console.log(s.toString())})),L.parse(process.argv);//# sourceMappingURL=cli.mjs.map